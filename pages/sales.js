
import Head from 'next/head'
import Link from 'next/link'

import { useState, useEffect } from 'react'

export default function Sales() {
  const [products, setProducts] = useState([])
  const [types, setTypes] = useState([])
  const [items, setItems] = useState([])
  const [form, setForm] = useState({
    customer: '',
    seller: '',
    note: ''
  })
  const [message, setMessage] = useState('')
  const [history, setHistory] = useState([])

  useEffect(() => {
    fetch('/api/products').then(res => res.json()).then(setProducts)
    fetch('/api/product-types').then(res => res.json()).then(setTypes)
    fetchHistory()
  }, [])

  const fetchHistory = async () => {
    const res = await fetch('/api/sales/history')
    const data = await res.json()
    setHistory(data)
  }

  const deleteSale = async (id) => {
    if (!confirm('‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ô‡∏µ‡πâ?')) return
    const res = await fetch(`/api/sales/${id}`, { method: 'DELETE' })
    if (res.ok) {
      fetchHistory()
    } else {
      alert('‚ùå ‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
    }
  }

  const addItem = () => {
    setItems([...items, { productTypeId: '', productId: '', quantity: 1, price: 0 }])
  }

  const updateItem = (index, field, value) => {
    const newItems = [...items]
    newItems[index][field] = value
    if (field === 'productId') {
      const product = products.find(p => p.id === parseInt(value))
      newItems[index].price = product?.salePrice || 0
    }
    setItems(newItems)
  }

  const removeItem = (index) => {
    const newItems = [...items]
    newItems.splice(index, 1)
    setItems(newItems)
  }

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value })
  }

  const handleSubmit = async (e) => {
    e.preventDefault()
    const saleItems = items.map(item => ({
      productId: parseInt(item.productId),
      quantity: parseFloat(item.quantity),
      price: parseFloat(item.price)
    }))
    const res = await fetch('/api/sales', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ ...form, items: saleItems })
    })
    if (res.ok) {
      setMessage('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß')
      setItems([])
      setForm({ customer: '', seller: '', note: '' })
      await fetchHistory()
    } else {
      setMessage('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å')
    }
  }

  const total = items.reduce((sum, item) => sum + (item.quantity * item.price), 0)

  return (
    <>
      <Head><title>‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ - OK Commobile</title></Head>      
      <main style={{ padding: '2rem' }}>
      <header className="header">
        <h1>OK Commobile</h1>
        <nav>
          <ul>
            <li><Link href="/">‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å</Link></li>
            <li><Link href="/services">‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£</Link></li>
            <li><Link href="/sales">‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</Link></li>
            <li><Link href="/products">‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</Link></li>
            <li><Link href="/stock">‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</Link></li>
            <li><Link href="/repair">‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏°</Link></li>
            <li><Link href="/admin">‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö</Link></li>
          </ul>
        </nav>
      </header>
        <h1>‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h1>
        <form onSubmit={handleSubmit}>
          <input name="customer" value={form.customer} onChange={handleChange} placeholder="üë§ ‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (optional)" />
          <input name="seller" value={form.seller} onChange={handleChange} placeholder="üßë‚Äçüíº ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢ (optional)" />
          <textarea name="note" value={form.note} onChange={handleChange} placeholder="üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°" />
          <hr />
          {items.map((item, index) => {
            const filteredProducts = products.filter(p => item.productTypeId && p.productTypeId === parseInt(item.productTypeId))
            return (
              <div key={index} style={{ marginBottom: '1rem', borderBottom: '1px dashed #ccc', paddingBottom: '1rem' }}>
                <select value={item.productTypeId} onChange={e => updateItem(index, 'productTypeId', e.target.value)}>
                  <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏ô‡∏¥‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ --</option>
                  {types.map(t => (
                    <option key={t.id} value={t.id}>{t.name}</option>
                  ))}
                </select>
                <select value={item.productId} onChange={e => updateItem(index, 'productId', e.target.value)}>
                  <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ --</option>
                  {filteredProducts.map(p => (
                    <option key={p.id} value={p.id}>{p.name}</option>
                  ))}
                </select>
                <input type="number" value={item.quantity} onChange={e => updateItem(index, 'quantity', e.target.value)} placeholder="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô" />
                <input type="number" value={item.price} onChange={e => updateItem(index, 'price', e.target.value)} placeholder="‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏ä‡∏¥‡πâ‡∏ô" />
                <span> ‡∏£‡∏ß‡∏°: {item.quantity * item.price} ‡∏ö‡∏≤‡∏ó </span>
                <button type="button" onClick={() => removeItem(index)}>‡∏•‡∏ö</button>
              </div>
            )
          })}
          <button type="button" onClick={addItem}>‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</button>
          <h3>‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total} ‡∏ö‡∏≤‡∏ó</h3>
          <button type="submit">üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢</button>
        </form>

        {message && <p>{message}</p>}

        <hr />
        <h2>üßæ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</h2>
        <div style={{ display: 'flex', flexWrap: 'wrap', gap: '1rem' }}>
          {history.map(sale => (
            <div key={sale.id} style={{
              border: '1px solid #ddd',
              borderRadius: '8px',
              padding: '1rem',
              width: '300px',
              background: '#f9f9f9',
              boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
            }}>
              <strong>üßë‚Äçüíº ‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢:</strong> {sale.seller || '-'}<br />
              <strong>üë§ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:</strong> {sale.customer || '-'}<br />
              <strong>üïí ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</strong> {new Date(sale.soldAt).toLocaleString()}<br />
              <strong>üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:</strong>
              <ul style={{ paddingLeft: '1.2rem' }}>
                {sale.items.map(item => (
                  <li key={item.id}>
                    {item.product?.name || '‚ùå'} √ó {item.quantity} = {item.total} ‡∏ö‡∏≤‡∏ó
                  </li>
                ))}
              </ul>
              <strong>üí∞ ‡∏£‡∏ß‡∏°:</strong> {sale.items.reduce((sum, i) => sum + i.total, 0)} ‡∏ö‡∏≤‡∏ó<br />
              {sale.note && <div><strong>üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> {sale.note}</div>}
              <button onClick={() => deleteSale(sale.id)} style={{ color: 'red', marginTop: '0.5rem' }}>üóëÔ∏è ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</button>
            </div>
          ))}
        </div>
      </main>
    </>
  )
}
